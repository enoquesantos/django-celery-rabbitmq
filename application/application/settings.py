"""
Django settings for application project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from datetime import timedelta
from os.path import dirname, abspath
import secrets

from .utils import get_env, create_file


# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent
BASE_DIR = dirname(abspath(__file__))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

DEBUG = get_env('DEBUG', False, True)
SITE_NAME = get_env('SITE_NAME', 'SITE NAME NOT SET')
ENVIRONMENT = get_env('ENVIRONMENT', 'production')
SECRET_KEY = get_env('SECRET_KEY', secrets.token_hex(30))
ALLOWED_HOSTS = get_env('ALLOWED_HOSTS').split()
TIME_ZONE = get_env('TIME_ZONE')
LOG_DIR = get_env('LOG_DIR', BASE_DIR + "/tmp-data/")
LOG_FILE = LOG_DIR + '/application-debug.log'


# security settings

# https://docs.djangoproject.com/en/4.0/ref/middleware/#http-strict-transport-security
SECURE_HSTS_SECONDS = int(get_env('SECURE_HSTS_SECONDS', 3600))

# https://docs.djangoproject.com/en/4.0/ref/settings/#std:setting-SECURE_SSL_REDIRECT
SECURE_SSL_REDIRECT = get_env('SECURE_SSL_REDIRECT', False, True)

# https://docs.djangoproject.com/en/4.0/ref/settings/#std:setting-SESSION_COOKIE_SECURE
SESSION_COOKIE_SECURE = get_env('SESSION_COOKIE_SECURE', False, True)

# https://docs.djangoproject.com/en/4.0/ref/settings/#std:setting-CSRF_COOKIE_SECURE
CSRF_COOKIE_SECURE = get_env('CSRF_COOKIE_SECURE', False, True)

# https://docs.djangoproject.com/en/4.0/ref/settings/#std:setting-SECURE_HSTS_INCLUDE_SUBDOMAINS
SECURE_HSTS_INCLUDE_SUBDOMAINS = get_env('SECURE_HSTS_INCLUDE_SUBDOMAINS', False, True)

# https://docs.djangoproject.com/en/4.0/ref/settings/#std:setting-SECURE_HSTS_PRELOAD
SECURE_HSTS_PRELOAD = get_env('SECURE_HSTS_PRELOAD', False, True)

# https://docs.djangoproject.com/en/4.0/ref/settings/#std:setting-SECURE_BROWSER_XSS_FILTER
SECURE_BROWSER_XSS_FILTER = get_env('SECURE_BROWSER_XSS_FILTER', False, True)

# https://docs.djangoproject.com/en/4.0/ref/settings/#std:setting-SECURE_PROXY_SSL_HEADER
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Setting the Referrer-Policy Header
# Django 3.x also added the ability to control the Referrer-Policy header. You can specify SECURE_REFERRER_POLICY in project/settings.py:
SECURE_REFERRER_POLICY = get_env('SECURE_REFERRER_POLICY', "strict-origin-when-cross-origin")


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'tinymce',
    'post_office',
    'django_celery_results',
    'django_celery_beat',
    'health_check',                      # required
    'health_check.db',                   # stock Django health checkers
    'health_check.cache',                # application python cache
    'health_check.storage',              # armazenamento
    'health_check.contrib.migrations',   # migrações do banco de dados
    'health_check.contrib.celery',       # celery
    'health_check.contrib.celery_ping',  # celery
    'health_check.contrib.psutil',       # disk and memory utilization
    'health_check.contrib.rabbitmq',     # requires RabbitMQ broker
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # custom middleware
    'application.middleware.HealthCheckMiddleware',
    'application.middleware.DenyAdminFromApiRequestMiddleware',
]

ROOT_URLCONF = 'application.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'application.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': get_env('DATABASE_ENGINE'),
        'NAME': get_env('DATABASE_NAME'),
        'USER': get_env('DATABASE_USER'),
        'PASSWORD': get_env('DATABASE_PASS'),
        'HOST': get_env('DATABASE_HOST'),
        'PORT': get_env('DATABASE_PORT'),
        'CONN_MAX_AGE': 20,
        'TIME_ZONE': TIME_ZONE,
        # 'OPTIONS': {
        #     'ssl': ENVIRONMENT == 'production'
        # }
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Email settings

EMAIL_BACKEND = get_env('EMAIL_BACKEND', "django.core.mail.backends.filebased.EmailBackend")
EMAIL_HOST = get_env('EMAIL_HOST', "localhost")
EMAIL_PORT = get_env('EMAIL_PORT', 25)
EMAIL_HOST_USER = get_env('EMAIL_HOST_USER', "")
EMAIL_HOST_PASSWORD = get_env('EMAIL_HOST_PASSWORD', "")
EMAIL_USE_TLS = get_env('EMAIL_USE_TLS', False, True)
EMAIL_USE_SSL = get_env('EMAIL_USE_SSL', False, True)
EMAIL_FILE_PATH = get_env('EMAIL_FILE_PATH', BASE_DIR + "/tmp-data")
DEFAULT_FROM_EMAIL = get_env('DEFAULT_FROM_EMAIL')
SERVER_EMAIL = DEFAULT_FROM_EMAIL


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

USE_I18N = True
USE_L10N = True
USE_TZ = True
TIME_ZONE = TIME_ZONE
# LANGUAGES = []
DATETIME_FORMAT = get_env('DATETIME_FORMAT')
LANGUAGE_CODE = get_env('LANGUAGE_CODE')


# Url where redirect user after logout
# https://docs.djangoproject.com/en/4.1/ref/settings/#logout-redirect-url

LOGOUT_REDIRECT_URL = "/admin/login"


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = get_env('STATIC_HOST', "") + '/static/'


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Settings for django-htmlmin
# https://github.com/cobrateam/django-htmlmin

HTML_MINIFY = ENVIRONMENT != 'development'


# Settings for django-tinymce - add TinyMCE
# editor into Django admin forms (TextArea)
# https://github.com/jazzband/django-tinymce

TINYMCE_DEFAULT_CONFIG = { }


# POST_OFFICE async email lib settings
# https://github.com/ui/django-post_office

POST_OFFICE = {
    # The SMTP standard requires that each email contains a unique Message-ID.
    'MESSAGE_ID_ENABLED': True,

    # Otherwise, if MESSAGE_ID_FQDN is unset (the default), django-post_office
    # falls back to the DNS name of the server, which is determined by the
    # network settings of the host.
    'MESSAGE_ID_FQDN': get_env('DOMAIN', ""),

    # Log only failed deliveries.
    # The different options are:
    #   0 logs nothing
    #   1 logs only failed deliveries
    #   2 logs everything (both successful and failed delivery attempts)
    'LOG_LEVEL': 2,

    # Delivering emails through the Celery worker.
    'CELERY_ENABLED': True,

    # The default priority for emails is medium, but this can be altered here.
    # Integration with asynchronous email backends (e.g. based on Celery)
    # becomes trivial when set to now.
    'DEFAULT_PRIORITY': 'now',

    # Here we automatically requeue failed email deliveries (is not activated
    # by default).
    'MAX_RETRIES': 3,

    # Schedule to be retried 5 minutes later
    'RETRY_INTERVAL': timedelta(minutes=5),
}
POST_OFFICE_CACHE = False


# A list of people who get code error notifications
# https://docs.djangoproject.com/en/4.0/ref/settings/#std:setting-ADMINS

ADMINS = [
    ('Webmaster', get_env('WEBMASTER_EMAIL')),
]


# create the application log file if not exists
create_file(LOG_FILE, "")


# The application log handlers
# https://docs.djangoproject.com/en/4.0/topics/logging/

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': LOG_FILE,
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['file'],
            'level': 'ERROR',
            'propagate': True,
        },
    },
}


# cache
# https://docs.djangoproject.com/en/4.0/topics/cache

if ENVIRONMENT in ['production',]:
    CACHES = {
        # 'default': {
        #     'BACKEND': get_env('CACHE_BACKEND'),
        #     'LOCATION': get_env('CACHE_LOCATION'),
        # },
        'staticfiles': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'staticfiles-filehashes'
        }
    }

    # sentry
    # https://sentry.io/for/django/

    from . import sentry
